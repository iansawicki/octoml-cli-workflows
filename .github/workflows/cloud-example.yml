name: cloud package, deploy, and test.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: octoml/octo-cli-actions-deploy/

on:
  workflow_call:

jobs:
  accelerated-package:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy
        env:
          OCTOML_AGREE_TO_TERMS: 1
          OCTOML_TELEMETRY: false
        run: |
          chmod u+x ./octoml
          ./octoml package -a | ./octoml build > build_output
          RUN_ID=$(awk  -F': ' '{print $2}' build_output)
          export RUN_DATA_PATH="$HOME/.octoml/db/$RUN_ID.json"
          export IMAGE_SHA=$(jq -r '.per_platform_data[].build_metadata.deployable_id.ID' $RUN_DATA_PATH)
          export IMAGE_TAG="${GITHUB_REF}-${GITHUB_SHA}-$(date +%s)"
          docker tag $IMAGE_SHA ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker tag $IMAGE_SHA ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Inference (Part 1)
        run: |
          sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3.8 python3-pip libgl1-mesa-glx libglib2.0-0
          pip3 install -r ./yolov5/requirements.txt
          pip3 install tritonclient[all]
          curl http://localhost:8000/v2/models/yolov5/config
          python3.8 ./yolov5/detect.py --weights http://localhost:8000 --source cat.jpg
      - name: Archive inference results
        uses: actions/upload-artifact@v3
        with:
          name: inference-result
          path: yolov5/runs/detect/exp
